{"ast":null,"code":"import _classCallCheck from \"/Users/catherineli/Documents/GitHub/webapps2019/react_app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/catherineli/Documents/GitHub/webapps2019/react_app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/catherineli/Documents/GitHub/webapps2019/react_app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/catherineli/Documents/GitHub/webapps2019/react_app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/catherineli/Documents/GitHub/webapps2019/react_app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/catherineli/Documents/GitHub/webapps2019/react_app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/catherineli/Documents/GitHub/webapps2019/react_app/src/Medicine.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport moment from \"moment-timezone\";\n\nvar Medicine =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Medicine, _Component);\n\n  function Medicine(props) {\n    var _this;\n\n    _classCallCheck(this, Medicine);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Medicine).call(this, props));\n    _this.state = {\n      color: '',\n      open: false,\n      textFieldValue: '',\n      cancel: '',\n      showReward: false,\n      hide: true\n    };\n    _this.changeColor = _this.changeColor.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleClickOpen = _this.handleClickOpen.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleOK = _this.handleOK.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleCancel = _this.handleCancel.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleTextFieldChange = _this.handleTextFieldChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.resetCheck = _this.resetCheck.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.server = \"http://localhost:5000\";\n    return _this;\n  }\n  /* COMPONENT DID MOUNT\n   *\n   * Determines if medicine has been taken today or not.\n   * If not, the medicine checkoff will be colored white.\n   * If yes, the medicine checkoff will be colored green.\n   */\n\n\n  _createClass(Medicine, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var today = new Date();\n      var getDate = moment(today).tz(\"America/New_York\").format(\"YYYY/MM/DD\");\n      fetch(this.server + \"/getDate?name=\" + this.props.med, {\n        mode: 'cors',\n        credentials: 'include',\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Credentials': true\n        }\n      }).then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        var dates = [];\n\n        if (typeof data[0] != 'undefined') {\n          for (var x in data[0].dates) {\n            var d = data[0].dates[x];\n            var momentd = moment(new Date(d)).tz(\"America/New_York\").format('YYYY/MM/DD');\n            dates.push(momentd);\n          }\n        }\n\n        if (dates.includes(getDate)) {\n          return _this2.setState({\n            color: '#6ADC83'\n          });\n        } else {\n          _this2.resetCheck();\n\n          return _this2.setState({\n            color: 'white'\n          });\n        }\n      });\n    }\n  }, {\n    key: \"resetCheck\",\n    value: function resetCheck() {\n      fetch(this.server + \"/resetCheck\", {\n        mode: 'cors',\n        credentials: 'include',\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Credentials': true\n        },\n        body: JSON.stringify({\n          medicine: this.props.med\n        })\n      });\n    }\n    /* Handles changes in password field value. */\n\n  }, {\n    key: \"handleTextFieldChange\",\n    value: function handleTextFieldChange(e) {\n      this.setState({\n        textFieldValue: e.target.value\n      });\n    }\n    /* Change color of circle if medication has been checked off. */\n\n  }, {\n    key: \"changeColor\",\n    value: function changeColor() {\n      var _this3 = this;\n\n      // do not pop up dialog if the circle is checked again.\n      if (this.state.color === '#6ADC83') {\n        return;\n      }\n\n      var today = new Date();\n      today.setHours(0, 0, 0, 0);\n      today = moment(today).tz(\"America/New_York\").format(\"YYYY/MM/DD\");\n      fetch(this.server + \"/verifyPassword\", {\n        mode: 'cors',\n        credentials: 'include',\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Credentials': true\n        },\n        body: JSON.stringify({\n          password: this.state.textFieldValue\n        })\n      }).then(function (res) {\n        return res.text();\n      }).then(function (data) {\n        if (data === \"Wrong password\") {\n          _this3.setState({\n            hide: false\n          });\n\n          return;\n        }\n\n        if (data === \"OK\") {\n          fetch(_this3.server + \"/addDate\", {\n            mode: 'cors',\n            credentials: 'include',\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json',\n              'Access-Control-Allow-Credentials': true\n            },\n            body: JSON.stringify({\n              medicine: _this3.props.med,\n              date: today\n            })\n          }).then(function (res) {\n            return res.text();\n          }).then(function (data) {\n            if (data === \"equal\") {\n              _this3.props.rerenderParentCallbackDates();\n\n              fetch(_this3.server + \"/incrementReward\", {\n                mode: 'cors',\n                credentials: 'include',\n                method: 'POST',\n                headers: {\n                  'Accept': 'application/json',\n                  'Content-Type': 'application/json',\n                  'Access-Control-Allow-Credentials': true\n                }\n              }).then(function (res) {\n                return res.text();\n              }).then(function (data) {\n                if (data === \"goal\") {\n                  _this3.props.rerenderParentCallbackReward();\n                }\n              });\n            }\n          });\n          var newColor = '#6ADC83';\n\n          _this3.setState({\n            color: newColor,\n            open: false\n          });\n        }\n      }).catch(function (err) {\n        // handle err\n        console.log(err);\n      });\n    }\n    /* DIALOG METHODS FOR CHECKOFF. */\n\n  }, {\n    key: \"handleClickOpen\",\n    value: function handleClickOpen() {\n      if (this.state.color !== '#6ADC83') {\n        this.setState({\n          open: true\n        });\n      }\n    }\n  }, {\n    key: \"handleCancel\",\n    value: function handleCancel() {\n      this.setState({\n        open: false\n      });\n      this.setState({\n        cancel: true\n      });\n    }\n  }, {\n    key: \"handleOK\",\n    value: function handleOK() {\n      this.changeColor();\n      this.setState({\n        cancel: false\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"medicine-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"one-medicine\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, React.createElement(Dialog, {\n        open: this.state.open,\n        onClose: this.handleCancel,\n        \"aria-labelledby\": \"alert-dialog-title\",\n        \"aria-describedby\": \"alert-dialog-description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, React.createElement(DialogTitle, {\n        id: \"alert-dialog-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, \"Please enter a password.\"), React.createElement(DialogContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, React.createElement(DialogContentText, {\n        id: \"alert-dialog-description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, \"To check off your medication a password is required.\"), React.createElement(TextField, {\n        autoFocus: true,\n        margin: \"dense\" // id=\"name\"\n        ,\n        label: \"Password\",\n        value: this.state.textFieldValue,\n        onChange: this.handleTextFieldChange,\n        type: \"password\",\n        fullWidth: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: this.state.hide ? 'hidden' : 'show',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, \"Your password is not correct.\"), React.createElement(DialogActions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: this.handleCancel,\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, \"Cancel\"), React.createElement(Button, {\n        onClick: this.handleOK,\n        color: \"primary\",\n        autoFocus: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, \"OK\"))), React.createElement(\"div\", {\n        className: \"circly\",\n        onClick: this.handleClickOpen,\n        style: {\n          background: this.state.color\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }, \" \"), React.createElement(\"p\", {\n        className: \"medicine-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, \" \", this.props.med)));\n    }\n  }]);\n\n  return Medicine;\n}(Component);\n\nexport default Medicine;","map":{"version":3,"sources":["/Users/catherineli/Documents/GitHub/webapps2019/react_app/src/Medicine.js"],"names":["React","Component","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","Button","TextField","moment","Medicine","props","state","color","open","textFieldValue","cancel","showReward","hide","changeColor","bind","handleClickOpen","handleOK","handleCancel","handleTextFieldChange","resetCheck","server","today","Date","getDate","tz","format","fetch","med","mode","credentials","method","headers","then","res","json","data","dates","x","d","momentd","push","includes","setState","body","JSON","stringify","medicine","e","target","value","setHours","password","text","date","rerenderParentCallbackDates","rerenderParentCallbackReward","newColor","catch","err","console","log","background"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport moment from \"moment-timezone\";\n\n\nclass Medicine extends Component {\n    constructor (props){\n        super(props)\n\n        this.state = {\n            color: '',\n            open: false,\n            textFieldValue: '',\n            cancel: '',\n            showReward: false,\n            hide: true\n        }\n\n        this.changeColor = this.changeColor.bind(this);\n        this.handleClickOpen = this.handleClickOpen.bind(this);\n        this.handleOK = this.handleOK.bind(this);\n        this.handleCancel = this.handleCancel.bind(this);\n        this.handleTextFieldChange = this.handleTextFieldChange.bind(this);\n        this.resetCheck = this.resetCheck.bind(this);\n\n        this.server = \"http://localhost:5000\";\n    }\n\n    /* COMPONENT DID MOUNT\n     *\n     * Determines if medicine has been taken today or not.\n     * If not, the medicine checkoff will be colored white.\n     * If yes, the medicine checkoff will be colored green.\n     */\n    componentDidMount(){\n      var today = new Date();\n      let getDate = moment(today).tz(\"America/New_York\").format(\"YYYY/MM/DD\");\n\n      fetch(this.server + \"/getDate?name=\" + this.props.med, {\n          mode: 'cors',\n          credentials: 'include',\n          method: 'GET',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Credentials': true,\n          },\n      })\n      .then(res => res.json())\n      .then(data => {\n\n        var dates = []\n\n        if (typeof data[0] != 'undefined'){\n          for (var x in data[0].dates){\n              var d = data[0].dates[x];\n              let momentd = moment(new Date(d)).tz(\"America/New_York\").format('YYYY/MM/DD')\n              dates.push(momentd);\n          }\n        }\n\n        if (dates.includes(getDate)){\n            return this.setState({color: '#6ADC83'})\n        }\n        else {\n          this.resetCheck();\n          return this.setState({color: 'white'})\n        }\n      });\n    }\n\n    resetCheck(){\n      fetch(this.server + \"/resetCheck\", {\n          mode: 'cors',\n          credentials: 'include',\n          method: 'POST',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Credentials': true,\n          },\n            body: JSON.stringify({\n              medicine: this.props.med,\n            })\n          });\n    }\n\n    /* Handles changes in password field value. */\n    handleTextFieldChange(e) {\n      this.setState({\n          textFieldValue: e.target.value\n      });\n    }\n\n    /* Change color of circle if medication has been checked off. */\n    changeColor(){\n        // do not pop up dialog if the circle is checked again.\n        if (this.state.color === '#6ADC83'){\n            return;\n        }\n\n        var today = new Date();\n        today.setHours(0, 0, 0, 0);\n        today = moment(today).tz(\"America/New_York\").format(\"YYYY/MM/DD\");\n\n        fetch(this.server + \"/verifyPassword\", {\n            mode: 'cors',\n            credentials: 'include',\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json',\n              'Access-Control-Allow-Credentials': true,\n            },\n              body: JSON.stringify({\n                password: this.state.textFieldValue,\n              })\n            })\n            .then(res => res.text())\n            .then(data => {\n              if (data === \"Wrong password\"){\n                this.setState({hide: false});\n                return;\n              }\n\n              if (data === \"OK\"){\n                fetch(this.server + \"/addDate\", {\n                    mode: 'cors',\n                    credentials: 'include',\n                    method: 'POST',\n                    headers: {\n                      'Accept': 'application/json',\n                      'Content-Type': 'application/json',\n                      'Access-Control-Allow-Credentials': true,\n                    },\n                      body: JSON.stringify({\n                        medicine: this.props.med,\n                          date: today,\n                      })\n                    })\n                    .then(res => res.text())\n                    .then(data => {\n                      if (data === \"equal\"){\n                        this.props.rerenderParentCallbackDates();\n\n                        fetch(this.server + \"/incrementReward\", {\n                            mode: 'cors',\n                            credentials: 'include',\n                            method: 'POST',\n                            headers: {\n                              'Accept': 'application/json',\n                              'Content-Type': 'application/json',\n                              'Access-Control-Allow-Credentials': true,\n                            },\n                            })\n                            .then(res => res.text())\n                            .then(data => {\n                              if (data === \"goal\"){\n                                this.props.rerenderParentCallbackReward();\n                              }\n                            });\n                      }\n\n              });\n\n              var newColor = '#6ADC83';\n              this.setState({color: newColor, open: false});\n            }\n          }).catch(err => {\n            // handle err\n            console.log(err)\n          })\n\n    }\n\n  /* DIALOG METHODS FOR CHECKOFF. */\n  handleClickOpen(){\n    if (this.state.color !== '#6ADC83'){\n      this.setState({ open: true });\n    }\n  };\n\n  handleCancel(){\n    this.setState({ open: false });\n    this.setState({ cancel: true });\n  };\n\n  handleOK(){\n    this.changeColor();\n    this.setState({ cancel: false });\n  };\n\n\n\n  render(){\n\n    return (\n    <div className=\"medicine-wrapper\">\n      <div className = \"one-medicine\">\n          <Dialog\n            open={this.state.open}\n            onClose={this.handleCancel}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\">\n            <DialogTitle id=\"alert-dialog-title\">{\"Please enter a password.\"}</DialogTitle>\n            <DialogContent>\n              <DialogContentText id=\"alert-dialog-description\">\n                To check off your medication a password is required.\n              </DialogContentText>\n              <TextField\n                  autoFocus\n                  margin=\"dense\"\n                  // id=\"name\"\n                  label=\"Password\"\n                  value={this.state.textFieldValue} onChange={this.handleTextFieldChange}\n                  type=\"password\"\n                  fullWidth\n                />\n            </DialogContent>\n              <div className={this.state.hide ? 'hidden' : 'show'}>\n                Your password is not correct.\n              </div>\n            <DialogActions>\n              <Button onClick={this.handleCancel} color=\"primary\">\n                Cancel\n              </Button>\n              <Button onClick={this.handleOK} color=\"primary\" autoFocus>\n                OK\n              </Button>\n            </DialogActions>\n          </Dialog>\n            <div className = \"circly\" onClick ={this.handleClickOpen} style ={{background: this.state.color}}> </div>\n            <p className=\"medicine-title\"> {this.props.med}</p>\n          </div>\n    </div>\n\n    );\n  }\n}\n\nexport default Medicine;\n"]},"metadata":{},"sourceType":"module"}